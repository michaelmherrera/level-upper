// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.// sources:
// tmp-files/inlined.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _inlinedHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x7b\x6f\xdb\xb8\x97\xfd\xbf\x9f\xe2\x8e\x8a\xfe\xea\x00\xb1\xe4\x24\x0d\x66\xea\x17\x30\x75\x9a\x6d\xd0\xc7\x04\x4d\x33\x83\xdd\x62\xb0\xa0\xa9\x6b\x8b\x09\x45\x6a\x48\xca\x8e\x27\xc8\x77\x5f\x90\x94\x64\xd9\x96\xd3\x34\x8f\xce\xfc\xb1\x06\x9a\x44\x97\xe4\xb9\xe7\x92\x97\x47\x7c\xb8\xfd\x9f\x8e\x7e\x1b\x7d\xf9\xef\xd3\xb7\x90\x98\x94\x0f\xa1\x6f\x7f\x01\x27\x62\x3a\x08\x50\x04\xd6\x80\x24\x1e\x42\x3f\x45\x43\x80\x26\x44\x69\x34\x83\xe0\xfc\xcb\x71\xfb\x97\xa0\x34\x0b\x92\xe2\x20\x98\x31\x9c\x67\x52\x99\x00\xa8\x14\x06\x85\x19\x04\x73\x16\x9b\x64\x10\xe3\x8c\x51\x6c\xbb\x87\x5d\x60\x82\x19\x46\x78\x5b\x53\xc2\x71\xb0\x17\x76\x2c\x0c\x67\xe2\x12\x14\xf2\x41\xa0\xcd\x82\xa3\x4e\x10\x4d\x00\x89\xc2\xc9\x20\x48\x8c\xc9\x74\x37\x8a\x52\x72\x45\x63\x11\x8e\xa5\x34\xda\x28\x92\xd9\x07\x2a\xd3\xa8\x32\x44\x07\xe1\xab\x70\x2f\xa2\x5a\x2f\x6d\x61\xca\x44\x48\xb5\xb6\x4e\x34\x55\x2c\x33\xa0\x15\x5d\x82\x92\x0b\x72\x15\x4e\xa5\x9c\x72\x24\x19\xd3\x0e\xd0\xda\x22\xce\xc6\x3a\xba\xf8\x2b\x47\xb5\x88\x0e\xc2\xc3\x70\xaf\x78\x70\x80\x17\x3a\x18\xf6\x23\x8f\xb7\x05\xf8\xae\x6c\x2f\xd6\xc9\xae\x61\x1b\x66\x38\x0e\xcf\x8c\x42\x34\x54\xc6\xd8\x8f\xbc\x05\xfa\x51\x31\x32\x63\x19\x2f\x86\xd0\x8f\xd9\x0c\x58\x3c\x08\x5c\x71\x7b\x4c\x94\x1b\xbc\xbd\xa5\x2d\x18\x7e\x20\x99\x91\x19\x1c\x49\x41\x0c\x93\x02\x4e\x95\xa4\xa8\x35\x13\xd3\x7e\x94\xec\x59\xc8\x98\xcd\x86\xd0\x9f\x48\x95\xda\xc6\xfb\x40\x39\xd1\x7a\x10\x68\xa4\xb6\x41\xbb\xc0\xf9\x03\xc7\x94\xa4\xfd\x28\xd9\xb7\xb5\x0e\xcb\x5a\xe9\xb8\xed\x06\x73\x9c\x1b\x23\x45\x69\x1d\x1b\x01\x63\x23\xda\x76\x88\x03\x30\x8b\x0c\x07\x81\xaf\x11\x40\x4c\x0c\x69\x1b\x39\x9d\x72\x1c\x04\x54\x72\x4e\x32\x8d\xa5\x99\xa8\xa9\x4d\xb5\xe7\x73\xe7\xed\x44\x68\xa3\x72\x47\x43\x07\x40\x14\x23\x6d\xbc\xca\x88\x88\x31\x1e\x04\x13\xc2\x6d\x3b\x67\xb5\xc9\xa7\x24\xd7\x83\xa0\xa9\xa1\x4b\xaf\x41\x30\x91\xc2\xb4\x35\xfb\x1b\xbb\xdc\xba\x09\x86\x50\xaf\x06\xfd\xc8\x33\x74\xbd\x7c\x58\x74\x6e\x11\xcf\x92\xa6\xed\xd9\x06\x1f\x6b\xd5\x89\x8a\xc1\xfe\x68\xdb\x71\xb2\x85\xd9\x10\xfa\x92\xbb\xa4\x1f\xc2\x88\x33\x7a\x09\xc1\x99\x21\xca\xc0\x88\xa4\xa8\x48\x00\x44\xc4\x40\x28\xc5\xcc\x80\x49\x10\x34\x33\xf8\x52\x83\xc2\xbf\x72\xd4\x06\x8c\x84\x5c\x23\x2c\x64\xae\x80\xba\x16\x21\xf4\x23\x0b\xe6\x10\x4f\x26\xae\x91\x2f\x01\xa6\x61\x92\x0b\xc7\x8c\xf0\x5d\x20\xc0\xd9\x0c\x61\x82\x18\x83\x4e\x64\xce\x63\x20\x59\x86\x44\xc1\x18\xb9\x9c\x87\x70\x22\xc0\x24\x4c\x03\x25\x1a\x77\x81\x7a\x76\x7e\xbc\xe1\xb8\x02\x0a\x83\x06\x8f\x4b\xe4\x58\xa2\x06\x21\x4d\x89\x3d\x67\x26\x61\x02\xf6\x3a\xa0\x91\xee\xae\xd1\xe3\xec\x12\xf9\xc2\x55\x5f\x32\x6d\x24\xb2\x5b\x31\xf9\x24\x45\x7b\xc9\xa6\x22\x13\xb9\x6e\x8d\xb2\x65\x26\x17\xbf\x6a\xe3\xe1\x07\xb6\x3d\x96\x57\xb5\x54\x5d\xcd\xca\xb5\xc4\xcd\x14\x4b\x89\x5a\xf8\x24\x9e\xba\x5f\x63\x2e\xe9\xa5\x4f\x00\x4a\xd2\x2f\x2e\x81\x83\x61\x7d\x10\xeb\x19\xf4\x23\x38\xd4\x7b\xa3\xc8\xf1\x31\xa1\x97\x53\x25\x73\x11\xb7\xa9\xe4\x52\x75\x9f\x77\x3a\x6f\x7e\x7e\xf5\x6b\xcf\x3f\xcd\x13\x66\xb0\x57\x4e\xe6\xda\xe0\xd6\xa8\x3f\x0a\xb5\x4f\x52\xdc\x89\xdd\xf1\xeb\x83\xbd\xc3\x57\xcd\xec\x56\x07\xbc\xb9\x73\xad\xbb\x19\x8b\x51\x3a\x09\x20\x4c\xa0\x93\x40\x67\x02\x92\x1b\x99\x71\xb2\x18\x04\x46\xe5\x58\x05\xc1\xd2\x69\x7b\xc2\x73\x16\x07\xe0\xdf\x55\xc1\x5e\xa7\xf3\x22\x80\x04\xd9\x34\x31\xe5\x53\x85\xfc\x96\x63\x8a\xc2\x58\xd8\xc8\x19\x96\x0c\xc6\xaa\xfc\xb1\x55\x36\x7f\xcd\x63\x26\x7f\x94\x6a\x12\xeb\xec\x1e\xa2\xd9\xd0\xee\xb1\x35\x73\xd3\xc5\x1d\x24\xf3\x73\x2e\x9c\x70\x18\x27\x81\x73\x46\xb1\x0b\x52\x50\x74\xe2\x22\x73\x03\xf6\x6d\x98\x25\x52\xa0\xb6\xeb\x0f\x81\xd4\x60\xec\x94\xb4\xaa\xd5\x58\x25\x5c\x8a\xf1\x8a\x16\x7f\x46\x2a\x55\xcc\xc4\xf4\x8e\x72\x6c\x4b\x52\x46\x95\x74\x0e\xc2\xa5\x3c\xfe\x41\x98\x81\x7d\xab\x7c\x30\x91\x0a\x54\x89\x6b\x1b\x6a\xeb\xca\x09\xa2\x00\x9d\x21\xb9\x74\x55\x08\x4c\x70\x6e\x1b\x48\x11\xeb\x1a\x52\xc5\x4f\x66\x35\x7a\x85\x9e\xfa\xb2\x53\x4e\x16\xb5\xb2\x7f\x50\x17\x53\x46\x57\x75\xb1\x62\xf5\xa8\xfa\x62\xe7\xf4\x32\xde\xe1\x6a\xfc\x3f\x54\x84\x5d\x56\xdf\x5f\x86\x9d\x38\x3c\x95\x0a\x3b\x6e\x0f\xd2\x61\x4f\xef\x5b\x32\x7c\x07\x11\x7c\x8f\x8b\xb1\x24\x2a\xfe\x7f\x1d\xbc\x9f\x0e\x7a\x11\xb0\x53\xbe\x4c\x0b\x09\x32\x43\x01\x04\x2e\x8b\xae\x75\x1a\x89\x0a\x98\x35\x0a\x9c\x43\x46\xa6\x18\xc2\xef\xa8\xd8\x64\x01\x26\x21\x06\x08\xe7\xb6\xba\x06\xa2\x70\x65\xd9\xd5\xa4\x12\xe4\xee\xc9\xb6\xba\x63\x2b\x09\xd1\x04\xe9\x25\x2a\xb7\xff\x09\xa0\x1c\x9a\xff\x1d\x73\x62\x07\x55\x49\xbe\x1c\xd4\xe1\x17\xab\xa9\xcb\x24\x21\x4f\x3b\x69\x4b\x86\xf7\x9f\xb7\x25\xd5\xa7\x9a\xba\x25\xc3\x07\xcd\xde\x8a\xe4\x23\x4c\xe0\x33\x39\x31\x73\x9b\x36\x47\x72\x2e\xb8\x24\xb1\x2e\xa6\xf2\xd6\x61\xba\x35\x7f\x1a\x13\xe7\x6f\x29\xd3\x30\xd7\x51\x5c\xb8\xf8\x46\xd2\x6c\xef\x8d\xfd\xa3\x5f\x46\xc7\xc7\xbd\x60\x58\x92\x85\xff\x91\x32\xf5\x69\xf5\xfd\xb4\xe6\xf3\x79\x48\x29\x47\x22\x8a\x64\x2e\x1f\x1e\x4c\x54\x4d\xc7\xad\xfd\x57\x7b\xbb\xf0\x8b\xfb\xb7\x53\x67\x3c\x1a\x79\x27\x0f\x61\x9d\x12\x6e\xc7\x6c\xbc\x30\xe8\xcf\x38\xd2\xf9\xb8\x5d\x92\xfe\xd6\x9c\xdc\xde\xbd\x07\x9d\x9f\x8f\xdf\xee\xd7\xc9\x7e\xac\x39\xf2\x84\x37\x32\xab\x5c\xab\x2b\xd4\x39\x37\x4e\xf4\xb6\x26\xdb\x91\x3b\x3a\x82\x13\x31\x91\x2a\x75\x87\x16\xe5\x7b\xe3\x60\x78\xaa\x64\x9c\x53\xe3\x0a\xfb\x51\x72\x30\x84\xbe\xce\x88\x70\xd8\x67\xa8\x18\xe1\x9f\xf2\x74\x6c\x37\x01\xdf\x3d\x0d\x75\x0a\x99\x92\x59\x30\x1c\xc9\x6c\x01\xbf\x13\x9e\xe3\x72\xae\x14\x9c\xbc\x0b\xf0\x3e\xba\x85\xef\x02\x73\x46\x78\x30\xfc\x8c\x46\x31\x9c\x31\x31\x0d\xc3\xb0\x1f\xd9\xf2\x61\xf1\xab\xe8\x89\x8a\xae\x87\xfc\x28\x63\xe4\x4f\xc4\xd6\x61\x3f\x0a\xcb\x63\x92\x32\xbe\x78\x22\x9a\x1e\xfc\x51\x78\x9e\xbd\x3f\x7f\xaa\x91\x7f\x7f\x7e\x3f\x86\xc9\xc1\xf0\x44\x18\x54\x13\x42\xb1\x00\xd3\xeb\x99\x3b\x22\xe9\xe7\x72\x62\x3c\x2a\x7b\x7f\x2e\xd1\x44\xfc\x93\x34\x60\x5f\xbb\x18\xdf\xde\xaf\x6e\x0d\xf8\x34\xe4\xc0\x61\x3f\x84\x5c\xf9\x8a\x7b\x22\x7e\x25\xfc\x3d\x28\x26\x07\xc3\x77\x44\xc5\xee\x9d\xd9\xa4\x55\xa3\xd3\xf3\x27\x99\xf9\xa3\xd3\xf3\x47\x99\xf6\xa3\xd3\xf3\xb3\x0c\xe9\xa3\x77\xa9\xe5\xe7\x80\x1f\xc8\xef\x23\xa6\x52\x3d\xba\x20\x79\xd4\x07\x52\x7b\x43\x8c\x41\xb5\x78\x87\x84\x9b\xe4\xb1\x19\x16\xe0\xe0\xd1\x1f\xc8\xf4\xdd\xd1\x88\x64\x84\x32\xf3\xe8\x1d\x69\x73\x1f\x8e\x14\x9b\x21\x94\x2e\xee\xc7\xd5\xfd\x28\x77\x26\xc5\x15\xc5\xb2\xa0\xe9\x47\x54\x5c\x8d\xb8\xf5\xcb\x10\xb2\x6b\x58\xee\xdd\x52\x8c\x59\x9e\xf6\x6e\x24\xaf\x5b\xdd\x8e\xae\x77\x93\xa8\x6b\x48\x89\x9a\x32\xd1\x36\x32\xeb\xee\x29\x4c\x7b\xc5\xf3\x58\x1a\x23\x53\x6f\x1a\x4b\x15\xa3\xea\x76\x8a\x3f\x5c\xdd\xfd\xec\x0a\xb4\xe4\x2c\x86\xa9\xc2\x45\x59\xa2\x48\xcc\x72\xdd\xdd\xcb\xae\x7a\x37\xcf\x8b\x85\x4f\x83\xdf\x70\xb9\x70\xbe\x86\x98\xe9\x8c\x93\x45\x77\xc2\xf1\xaa\x77\x91\x6b\xc3\x26\x8b\x76\x71\xb5\xd6\xa5\x68\x5f\x24\x3d\xc2\xd9\x54\xb4\x99\xc1\x54\x97\xa6\x9b\x70\x6c\x44\x49\xbf\xbb\xd7\x71\x2e\xd7\xce\x45\xaf\x61\x73\x2d\x77\x74\xfc\xfa\xf8\xf5\x41\x2f\x23\x71\xcc\xc4\xb4\x7b\xf8\xa2\xe7\x0f\x41\xbb\xaf\x3a\x16\x63\x35\x90\x43\x8b\x1a\xae\x2c\xd6\xae\xc1\xe0\x95\x69\x3b\x46\x15\x97\xe7\x45\x51\x89\xba\x6f\xa1\x0a\x6a\x9d\xb2\xb8\x3d\x26\xea\x1a\x66\xa8\x0c\xa3\x84\x17\x08\x29\x8b\x63\x8e\xbd\x4d\x4c\x77\x4e\xdb\xdd\xeb\x74\x2a\x82\x7b\x9e\xe0\x7a\x44\x7e\xf3\x73\x63\x73\xa0\x21\xde\x44\xf3\x56\x67\x17\x3a\x2f\x76\xe1\xf5\xe1\x8b\x1d\xb8\xb1\x19\x55\x11\x75\x43\x79\x68\x61\xcb\x51\x70\x4b\xeb\x32\x09\x38\x4e\x4c\x97\xe4\x46\x96\x06\xe5\x88\x14\x96\x2b\x7f\xd5\xd9\xfd\xd9\xf1\xba\xe9\x47\x45\xfe\x95\xf7\x84\x7e\x5e\xd9\xc8\xa2\x0b\x32\x23\xde\x1a\x0c\x39\x1a\xd0\x46\x21\x49\x61\x00\x22\xe7\xbc\xf7\xcc\x9a\x28\x49\x7f\xa5\xc6\x4e\x9f\x01\xb8\xa3\x0a\x6f\x4e\x19\xb5\x66\x5a\x33\x97\xfb\x78\xb7\xff\x1f\x91\xb4\xb5\x03\xd7\xcf\x00\x00\xd8\x04\x5a\x15\x4c\x69\xb4\x1f\x85\x26\x57\xa2\xe7\x9e\x6f\xdc\xcf\x19\x51\xe0\x4f\xcc\x07\x10\x4b\x9a\xa7\x28\x4c\xe8\x2e\x3e\xcf\x90\x23\x35\x52\xb5\x82\xe7\x2b\x67\xe1\x3b\xbe\x79\x55\x79\x8a\xa6\x28\x7a\xb3\x38\x89\x5b\xb5\x0b\x92\x9d\x90\x09\x81\xea\xdd\x97\x8f\x1f\x60\x50\x9c\x63\x16\x57\x5e\x1e\xa3\x1e\xaa\x51\x39\xf6\x2a\xf6\x82\xcc\xd8\x94\x18\xa9\x42\x3b\x6f\x49\xb1\x76\xb2\xbe\xce\x35\xaa\x8f\xd6\x56\x8f\xeb\x0e\xd5\x5b\xd7\x3e\xce\xae\xf3\x04\x37\x3b\x55\x63\xfb\x09\x4d\x82\xa2\x55\x8e\xc6\xb0\x06\x6d\x3f\x51\x04\x8e\xfc\xf2\x22\x6b\xa5\xf8\x4e\x5d\x41\xe2\xf8\xed\x0c\x85\xf9\xc0\xb4\x41\x81\xaa\x15\xb8\x23\xdc\x60\x17\x5a\x3b\x9b\x1e\xcb\x7e\xf8\xa9\x71\x18\xeb\x9f\xfa\x90\xd6\x3f\x37\x1b\x16\x1f\x9d\x25\xf9\x45\x11\x7a\xa9\x5b\x3b\xe1\x44\xaa\xb7\x84\x26\xad\x2a\x93\x5a\xc6\x16\x6d\xf3\x65\x19\xb9\x0a\xa1\x42\x12\x2f\xce\x0c\x31\x08\x83\x01\xbc\xe4\x6c\x86\x2f\xe1\x3f\xff\x01\x5f\x7a\xc9\x44\x0c\x03\x5b\xe0\xba\xfc\xe5\x36\x3c\xfb\xf1\x2d\xb4\x91\x59\x6b\x67\x33\x8a\xef\xea\xe2\xb5\x6c\xab\xdd\xb0\x6e\x07\x6e\x98\x6d\x4d\xd5\x36\x7b\xf3\x66\x8d\xed\xfa\xb3\x8b\x3c\xd4\x8a\xfe\x36\xbe\x40\x6a\x60\x50\xf4\xff\xb2\xd6\x7a\x0a\x52\x62\x68\xd2\x42\xb5\x99\x0d\x54\x0a\x2d\x39\x86\x5c\x4e\x5b\xc1\x99\x4c\xd1\x24\x4c\x4c\x61\x8e\xc2\xc0\x5c\x49\x31\xfd\x29\xd8\xa9\xe3\x96\x13\xfc\x66\x55\x22\xdc\x9a\x7b\x45\x24\x2a\x51\xb9\x5d\x24\xb6\xf6\xfe\xf2\xd0\xbf\x69\xae\x2f\xcf\xe9\x3d\x58\x5d\xc2\x7e\xc0\x74\x27\x7e\x8b\xf1\xfd\xd3\xdd\x6a\xa2\x03\xf6\x01\xd8\x11\x71\xc7\xaa\x1f\xeb\xb6\xa2\xf5\x2e\x14\x8e\xde\x30\xa3\x4f\x51\x9d\xb9\x5b\x9c\x2e\xec\x77\xec\x67\x23\x2b\x56\x60\x43\x77\x1d\xb4\x9e\xf6\xd6\xbb\x43\x1c\x25\xb9\xb8\xd4\x30\x80\xaf\x7f\xde\x06\xb2\x29\x2c\x31\x31\x84\xcc\x08\xe3\x64\xcc\x31\xd8\x05\xb4\xc5\xcd\x1a\x53\x73\x14\x66\xb9\x4e\x5a\xae\x6e\x68\x11\xbe\x91\xdf\x5b\x73\x62\xf5\x86\xe6\x3e\xc2\x77\x67\xe8\x95\x94\x3b\xe5\x64\x61\x67\x45\x75\xe1\x16\x86\x61\xc3\xc4\xb7\x73\xc9\x14\x43\xc6\xe5\xb8\x18\x5a\xfb\x67\xab\xd6\x19\x0d\x52\x54\x6b\x78\xae\x38\x0c\xe0\xfc\xf3\x87\x90\x2a\x24\x06\xfd\x14\x3f\xff\xfc\xa1\x55\xe1\xde\x0e\x50\x78\xf5\x13\xb2\x84\x6c\x68\xe2\x8a\x42\x1b\x76\x93\x38\xfa\x52\x29\x50\xc4\x18\x5b\xfd\xaa\x54\x7c\x9b\xe0\xde\xbf\x67\x37\x26\xf3\x4a\x6e\x6c\xe1\xb6\x35\x83\xef\x9c\x4c\x75\x81\xb9\xe7\x1b\xb4\x51\xe3\xea\x9f\x7f\xf7\x1b\xd4\x75\xe4\x53\xbe\x41\x6f\xd1\xf0\xd5\x7b\xf1\xed\xd8\x0d\x6b\xd3\xa6\x6a\xdf\x7e\x89\x42\x83\x44\x36\x87\xb5\xa1\xcf\x6e\xfd\xbc\x0d\xbb\xf1\x95\xa8\x70\x6a\x33\x49\xad\x24\x95\xae\xe6\xce\x03\x57\x75\xc5\x9a\xfc\x0e\xab\xe5\xda\x35\xcf\xf7\x24\xf9\x56\xc8\xda\x89\xe2\x4e\xad\x50\xbf\x59\x8c\xec\xfe\xfb\x13\x49\xb1\xe5\xf6\xe0\x3b\x5f\x3b\x7f\xae\x0e\x79\x8d\x4a\xd1\x61\x77\xe0\xbf\x7a\x53\xf5\x4f\x87\xb0\xf6\x55\xb1\x3b\x86\xb1\x7e\x99\xff\x28\x51\xac\x9c\x9f\x3e\xfd\x50\x34\x5c\xfa\xff\xf3\x61\xdc\x6f\x38\x1a\xae\x69\x1f\x25\x94\xf5\x43\xe3\xa7\x1f\x94\xe6\xeb\xdc\x7f\x45\x30\xf7\x1b\x9a\xbb\xbd\x91\xab\xed\xc6\x4e\xaf\x49\x72\x47\x32\x5b\xbc\x71\x47\x5f\x4b\xbd\xb5\xeb\x5e\x2c\xd8\xd7\x0f\x23\xb6\x05\x75\xdb\xc1\x64\x11\xc4\x44\x2a\x68\x71\x34\x0e\x17\xe4\xa4\xc2\xaf\xbf\x4e\xad\xed\x96\x48\xb6\x2c\x9e\xa3\x08\xfe\x0b\xfd\xf7\xc3\x0a\x50\xff\x45\x0b\xa3\xd8\x74\x8a\x0a\x63\x5f\x64\x1b\x6f\xac\xee\x8b\x3a\x4c\x4c\x6d\x60\x30\xf0\xd5\x42\x7f\x27\xdb\xdb\xe6\x66\x46\x78\x8e\x36\x08\xfb\x60\xa3\x44\x65\x16\xfe\x7b\x6e\xf3\x84\xd1\xc4\x9f\x4e\xc8\x6c\x51\x7e\x51\x84\x69\x20\x5a\x4b\xca\x88\xc1\x78\x83\x84\x45\xf8\x9d\x70\xb7\x15\xab\xd3\x09\x33\xa2\x50\x94\x5d\x1e\xd2\x84\xf1\x58\xa1\xf8\xba\x57\xcb\x9e\x0d\x8e\x23\xb7\x0c\x8e\x81\x40\x9c\xa7\xe9\x02\x98\xc8\x72\x03\x5a\x16\x7d\x52\xb1\xa7\x44\xc0\xd8\xb1\x64\xb6\x87\x64\xf9\x55\xb6\xcc\x25\xf2\x66\x47\x61\x9a\x9d\x38\xa8\x5a\x3e\xf8\x25\x77\xc1\xaf\x15\x38\x57\xc1\xda\x0a\xa1\x6a\x18\x7a\xbf\x83\x32\xdc\x2d\xcb\xce\xb1\x8c\x17\x21\xc9\x32\x14\xf1\xc8\x06\xdc\xaa\x00\xb6\x02\x6b\x77\x3c\xb6\xbe\x34\xa9\x10\xf1\x0a\xe9\x48\xa6\x29\x11\xf6\x25\x29\xb3\xc5\x3a\xc5\x55\xdf\x0a\x53\x39\xc3\xed\xbe\x1b\x17\x30\x53\x34\x7e\xeb\x7b\x22\x26\xcb\x7d\xfd\x04\x0d\x4d\x5a\x2f\x23\xbb\x87\x0b\x2f\xb4\x14\x2f\x97\x7b\x5f\xbf\xef\x55\xa8\x33\x29\x34\xda\xac\x2e\xff\x76\x35\x5b\x3b\xeb\x55\x2d\xc8\x6a\xf2\xdb\xe9\x34\x61\xc8\x63\xb7\xae\x5f\x09\x69\x79\x73\xb4\xbb\x61\xf7\x37\x5e\x6b\xf6\xe2\x26\x67\xcd\xba\x7a\x89\xb2\x56\x58\xbb\xb7\x58\x2b\x59\xf9\x0a\xc0\x5a\x59\xfd\xbe\xbd\xb1\xa8\xb8\xe4\x6e\x2c\x3b\x7b\x7f\x1e\x54\xf6\xda\x46\xc6\xa9\x8b\xdf\xd4\x31\x60\xa2\xe8\x95\xf5\x95\x7a\xd5\x5f\x56\xb5\xec\xfa\xd8\xd5\xfa\xca\xfe\xbc\xdb\x0e\xa8\x6a\xfa\x9d\xea\x6e\x07\xee\x6b\xd5\xb8\xe6\xec\xa6\x92\xf9\x9b\x67\xdb\x56\xc0\xbd\x67\x8d\x42\xdd\x7b\xb6\x96\x71\xbd\xda\xff\x5b\x89\xdc\xff\x27\x7a\xf6\x7f\x01\x00\x00\xff\xff\x41\xe4\x87\x27\x60\x34\x00\x00")

func inlinedHtmlBytes() ([]byte, error) {
	return bindataRead(
		_inlinedHtml,
		"inlined.html",
	)
}

func inlinedHtml() (*asset, error) {
	bytes, err := inlinedHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "inlined.html", size: 13408, mode: os.FileMode(420), modTime: time.Unix(1609441379, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"inlined.html": inlinedHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"inlined.html": &bintree{inlinedHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
