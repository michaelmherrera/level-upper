// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.// sources:
// inlined.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _inlinedHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x7b\x6f\xdb\xb8\xb2\xff\xdf\x9f\x62\x56\xc5\x9e\x3a\x40\x2c\x39\x69\x83\xdd\x4d\x6c\x03\x5b\xa7\xb9\x1b\x6c\xdb\x13\x34\xcd\x1e\xdc\x5b\x2c\x2e\x68\x69\x6c\x31\xa1\x48\x1d\x92\xb2\xe3\x73\xd0\xef\x7e\x41\x52\x92\xf5\x72\xea\xe6\xb5\xbd\xc0\x11\xd0\x26\x22\x87\x33\xf3\x1b\xce\x83\x22\x99\xd1\x0f\xa7\x7f\x9f\x7e\xfa\xef\x8b\xb7\x10\xeb\x84\x4d\x7a\x23\xf3\x03\x18\xe1\x8b\xb1\x87\xdc\x9b\xf4\x7a\xa3\x18\x49\x34\xe9\x01\x00\x8c\x12\xd4\x04\xc2\x98\x48\x85\x7a\xec\x5d\x7d\x3a\x1b\xfc\xec\x55\xbb\x38\x49\x70\xec\x2d\x29\xae\x52\x21\xb5\x07\xa1\xe0\x1a\xb9\x1e\x7b\x2b\x1a\xe9\x78\x1c\xe1\x92\x86\x38\xb0\x2f\xfb\x40\x39\xd5\x94\xb0\x81\x0a\x09\xc3\xf1\x81\x3f\x2c\x58\x31\xca\x6f\x40\x22\x1b\x7b\x4a\xaf\x19\xaa\x18\x51\x7b\x10\x4b\x9c\x8f\xbd\x58\xeb\x54\x1d\x07\x41\x42\x6e\xc3\x88\xfb\x33\x21\xb4\xd2\x92\xa4\xe6\x25\x14\x49\x50\x36\x04\xaf\xfc\xd7\xfe\x41\x10\x2a\xb5\x69\xf3\x13\xca\xfd\x50\xa9\x42\x90\x0a\x25\x4d\x35\x28\x19\x6e\x18\x93\x6b\x72\xeb\x2f\x84\x58\x30\x24\x29\x55\x96\xa9\x69\x0b\x18\x9d\xa9\xe0\xfa\x9f\x19\xca\x75\xf0\xca\x3f\xf2\x0f\xf2\x17\xcb\xf4\x5a\x79\x93\x51\xe0\xf8\xdd\xc1\x7c\x57\xad\xaf\x9b\x4a\x77\xf0\xd7\x54\x33\x9c\x5c\x6a\x89\xa8\x43\x11\xe1\x28\x70\x2d\xbd\x51\xe0\x66\xac\x37\x9a\x89\x68\x3d\xe9\x39\xf2\x88\x2e\x81\x46\x63\xcf\x12\x0d\x66\x44\xe6\x46\xb0\x9d\xf1\xc1\xa6\xcf\x9b\xbc\x23\xa9\x16\x29\x9c\x0a\x4e\x34\x15\x1c\x2e\xa4\x08\x51\x29\xca\x17\xa3\x20\x3e\x28\x18\x06\x11\x5d\xe6\xaa\xcc\x85\x4c\xaa\xdc\x0e\x21\x64\x44\xa9\xb1\xa7\x30\x34\x1c\x06\x39\xe3\x7f\xe0\x2c\x24\xc9\x28\x88\x0f\x73\x26\x8e\xfc\xa8\x20\x4f\x66\x83\x61\x45\x2d\xdb\x3b\xcb\xb4\x16\xbc\xa0\x98\x69\x0e\x33\xcd\x07\xc6\x45\x3c\xd0\xeb\x14\xc7\x9e\xa3\xf0\x20\x22\x9a\x0c\xb4\x58\x2c\x18\x8e\xbd\x50\x30\x46\x52\x85\x45\x33\x91\x0b\xe3\xb2\x2f\x56\x56\x85\x73\xae\xb4\xcc\xac\x6e\xca\x03\x22\x29\x19\xe0\x6d\x4a\x78\x84\xd1\xd8\x9b\x13\x66\xc6\xd9\x56\xe3\xc0\x52\x30\x35\xf6\xba\x06\x5a\xf7\x1c\x7b\x73\xc1\xf5\x40\xd1\x7f\xe1\x31\x30\x23\xa7\x01\xc1\x3c\xd5\x71\x75\x7c\x81\x53\xbf\x6a\x90\x20\x3e\xaa\xbe\x9a\x99\xcb\xe1\x6f\x50\x99\xe9\xea\x50\xa9\x61\xbc\xea\x50\x22\x23\x30\xff\x0d\x8c\x57\x74\xa8\x38\x4a\x3b\xda\x04\x6b\x37\xe6\x31\x3a\x81\x29\xa3\xe1\x0d\x78\x97\x9a\x48\x0d\x53\x92\xa0\x24\x1e\x10\x1e\x01\x09\x43\x4c\x35\xe8\x18\x41\x51\x8d\x2f\x15\x48\xfc\x67\x86\x4a\x83\x16\x90\x29\x84\xb5\xc8\x24\x84\x76\x84\x0f\xa3\x80\xd1\x3b\xa4\x9c\xcf\x2d\x23\x47\x0d\x54\xc1\x3c\xe3\x16\x2d\x61\xfb\x40\x80\xd1\x25\xc2\x1c\x31\x02\x15\x8b\x8c\x45\x40\xd2\x14\x89\x84\x19\x32\xb1\xf2\xe1\x9c\x83\x8e\xa9\x82\x90\x28\xdc\xef\x14\x62\x9e\xd0\x21\x71\xfe\x09\x67\xa5\x00\xdf\xdb\x51\xbb\x8d\x16\x91\x40\x05\x5c\xe8\x42\x8f\x15\xd5\x31\xe5\x70\x30\x04\x85\xe1\x7e\x03\x0a\xa3\x37\xc8\xd6\x96\x7c\x83\xca\xdf\xaa\x66\x0d\x8c\x53\x7a\xbf\xd4\xfa\x83\xe0\x83\x8d\xe6\x5e\xb7\xca\x9d\x60\x46\x41\xd7\x34\x8f\x82\x86\x43\x54\x22\xbe\xf2\xda\xe9\xa7\xce\xa7\x07\x33\x71\xbb\x25\x9c\xeb\x91\xdb\x08\xee\x54\xd2\x84\xc8\xb5\x0b\xf4\x85\xfd\x31\x63\x22\xbc\x71\x5e\x1f\x92\xe4\x93\x0d\x72\x6f\x52\xf5\xbc\x4d\x20\x6d\xd3\xf7\xf9\xf4\xab\x4c\x43\x91\x23\x66\x24\xbc\x59\x48\x91\xf1\x68\x10\x0a\x26\xe4\x31\xbc\x18\x0e\xdf\xfc\xf4\xfa\xd7\x13\xc8\xdf\x57\x31\xd5\x78\x52\x24\xc9\x8a\x13\xb6\x91\x3d\x9e\xa6\x1f\x04\xdf\x4d\xd9\xb3\x5f\x5e\x1d\x1c\xbd\xde\xa6\x6c\xdd\xf7\x76\x9b\x0a\xa3\xc1\x92\x46\x28\x6c\x92\x25\x94\xa3\x29\x49\x75\x8c\xb6\x1f\x48\xa6\x45\xca\xc8\x7a\xec\x69\x99\x61\x09\x92\x26\x8b\xc1\x9c\x65\x34\xf2\xc0\x2d\x2f\xbc\x83\xe1\xf0\x47\x0f\x62\xa4\x8b\x58\x17\x6f\xa5\x98\xb7\x0c\x13\xe4\xba\x25\x23\xb0\xbd\x6d\xbf\xee\x55\x5c\x7b\x26\x27\xf5\x97\x1d\x8a\xdd\xaf\x59\x44\x85\xab\x75\x1b\xe2\xe7\x2c\x75\xc4\x28\x70\x8f\x4a\xd7\x31\xee\x51\x0b\xdd\xa6\x65\xc7\x3a\xd7\x56\xe8\x91\xcb\x9c\x79\x3e\x66\xdc\x26\x67\x6d\xcb\xd4\x8a\x86\x78\x0c\x82\x87\x68\x13\xb8\xc8\x34\x98\x45\x55\x1a\x0b\x8e\xca\x2c\x6b\x39\x86\x1a\x23\x5b\xed\x4a\xaa\x4e\x92\x76\x36\xbf\xb3\xa8\xd6\x6a\xea\x47\x0c\x85\x8c\x28\x5f\xec\x58\x56\x4d\x4f\x42\x43\x29\xac\x12\xfe\xdd\xa5\xeb\x1f\x84\x6a\x38\x34\x55\x09\xe6\x42\x82\x2c\x64\x19\x66\xca\x88\xb7\xc5\x8a\x83\x4a\x91\xdc\x58\x12\x02\x73\x5c\x99\x01\x82\x47\xea\x2b\xdc\x4b\x1c\x22\xad\xc0\xc8\xeb\x9f\xeb\xbb\x60\x64\x5d\xe9\x73\xfc\xfe\x9f\x17\xa7\x84\x86\xf5\xe2\x54\xe2\x7b\xb2\x2c\x6e\x32\xe3\xc6\x8a\x93\xba\x55\xbf\x9b\xaa\x68\x63\xf8\x41\x75\xd1\xe6\xd3\xe7\x28\x8b\x56\xd5\x87\x16\x46\xa7\xed\x8e\x75\xf1\xc1\xb5\xe6\x77\x5c\xcf\x04\x91\xd1\x7f\xca\xcd\xc6\xb2\xdf\x77\xb9\x71\xf9\xd1\x64\xc3\xc2\x61\x05\x88\x14\x39\x10\xb8\xc9\x27\xd3\x96\x22\x94\x40\x4d\x23\xc7\x15\xa4\x64\x81\x3e\xfc\x81\x92\xce\xd7\xa0\x63\xa2\x81\x30\x66\xc8\x15\x10\x89\x5f\xfd\x82\x78\x78\x12\x25\xbb\x07\x52\x7d\xb7\xa6\x80\x14\xc6\x18\xde\xa0\xb4\x7b\x1e\x1e\x14\xae\xf3\xbf\x33\x46\x8c\xd3\x49\xc1\x36\x4e\x37\xf9\x64\x0a\xdb\xc6\xb1\xc9\x5f\x90\xcd\x0b\xb5\x1f\x94\xb7\x0a\x08\xcf\x91\xba\x0a\x85\x1f\x9a\xbd\x4a\x9d\x77\x4f\x60\x1b\x14\xf7\xc8\x5f\x97\x62\xae\x57\xc6\x87\x4f\xc5\x8a\x33\x41\x22\xd5\xdc\x24\xda\x69\xc6\xef\xf4\xcf\x4e\xc7\xfc\x97\x10\x89\x9f\xa9\x20\xca\xe5\x7e\xc5\x29\xef\xb0\xe4\xe1\xe9\xcf\xd3\xb3\xb3\x13\x6f\x52\x40\x68\x85\xdb\xff\x08\x91\x58\x3f\x7e\xa0\xce\xab\xd5\xca\x0f\x43\x86\x84\xe7\x91\x54\xbc\x3c\x18\x85\x5c\xcc\xfa\x87\xaf\x0f\xf6\xe1\x67\xfb\x6f\xaf\x82\x06\xa6\x53\x27\xe4\xb1\x10\x24\x84\x99\x19\x9f\xad\x35\xba\x4d\xd6\x64\x35\x1b\x14\x00\xbe\x96\x1c\xee\x98\x87\x57\xc3\x9f\xce\xde\x1e\x56\x35\x7f\x5f\x91\x54\xd3\xbe\x74\xde\xed\xbe\x5b\xf3\x3f\x13\x61\x12\x55\xc6\xb4\x6a\x7d\x45\x6e\x75\xed\x53\xbb\xe7\x0d\xe7\x7c\x2e\x64\x62\xf7\x53\x1b\xae\xed\x86\xbf\x9a\x5c\x48\x11\x65\xa1\xb6\x94\xa3\x20\x7e\xd5\xb0\xb2\x4a\x09\xb7\x1a\x5c\xa2\xa4\x84\x7d\xc8\x92\x99\xf9\x60\xfe\xe6\xa4\xa1\x12\x48\xa5\x48\xbd\xc9\x54\xa4\x6b\xf8\x83\xb0\x0c\xcb\xb0\x06\xa7\x6c\xcb\x73\x9d\x48\x70\x32\x8f\x73\x5d\x72\x19\x4b\xc2\xbc\xc9\x47\xd4\x92\xe2\x92\xf2\x85\xef\xfb\xa3\xc0\xf4\x4f\xf2\x1f\x8d\x14\x27\xb7\xc1\x72\xa2\xdf\x8b\x08\xd9\x33\xa1\xb2\xb2\x9e\x14\xcd\x19\x49\x28\x5b\x3f\x13\x1c\x27\xec\x49\xf1\x5c\xfe\x7e\xf5\x5c\x1e\xf7\xfb\xd5\x83\x91\xb4\x22\xec\x9c\x6b\x94\x73\x12\x62\x2e\x55\xdd\x15\x66\x53\x92\x7c\x2c\x62\xfd\x51\x21\xbb\xed\xca\xe3\xf6\x6a\xac\x85\xf6\x83\xd0\x60\x56\x41\x18\xdd\x6f\xd2\xec\x37\xc8\xd3\x80\x00\xcb\xfb\x39\x40\x14\x4b\x91\xa7\xc1\xd1\x02\x50\x88\x7b\x5c\x68\x2d\x57\xfc\x8d\xc8\xc8\x2e\x78\x36\xd9\x7e\x9b\x1f\x5e\x5c\x3d\x49\x52\x9c\x5e\x5c\xe5\x19\x70\x07\xa4\x8f\x90\x41\xa6\x17\x57\x97\x29\x86\x8f\xee\x88\x06\x87\x65\xfc\x4c\x38\xde\x63\x22\xe4\xa3\xe7\x74\xc7\xf5\x99\x20\xbc\x21\x5a\xa3\x5c\xff\x86\x84\xe9\xf8\xa9\x03\x2a\x17\x06\x4e\xda\x13\x95\xa7\xdf\x4e\xa7\x24\x25\x21\xd5\x8f\x3e\x31\x26\x50\x5b\x98\x4e\x25\x5d\x22\x14\x22\x1f\x17\x93\x4d\x17\xbd\xae\xed\xba\x51\xe0\xce\xd9\x7b\xb5\x81\x3b\xff\xe2\x9e\x51\xe0\x2e\x05\x8c\xec\x0a\xda\x75\xa7\xf0\xef\x52\x5e\x65\xcf\x25\xc1\x88\x66\xc9\x89\xed\xfa\xe2\xa4\x0a\xd6\x4d\x6a\xb7\x67\x6a\x94\xb1\xac\x50\x26\x44\x2e\x28\x1f\x68\x91\x1e\xc3\x81\xc4\x9c\x67\xa5\x67\x26\xb4\x16\x49\xb3\x73\x26\x64\x64\xd6\x9b\xc3\x66\x93\xe3\x74\x98\xde\x82\x12\x8c\x46\xb0\x90\xb8\x6e\xd1\x48\x12\xd1\x4c\x1d\xc3\x41\x7a\x5b\xd3\xec\x45\xbe\x84\xdf\x15\x89\xbf\xf9\xde\xac\x0c\x89\xa8\x4a\x19\x59\x1f\xc3\x9c\xe1\xed\x46\xf6\x75\xa6\x34\x9d\xaf\x07\xf9\xc5\x97\x63\x08\xd1\x2c\x3a\x36\x04\x84\xd1\x05\x1f\x50\x8d\x89\xaa\x77\x96\xd2\x34\x6f\x59\xee\x18\x0e\x86\x4d\x14\x8d\xa3\xb3\xca\x98\x8e\x8f\xa2\xd3\xb3\x5f\xce\x7e\x79\xb5\xd1\x22\x25\x51\x44\xf9\xe2\x18\x8e\x7e\xdc\x34\xba\x73\xb3\x63\x78\x3d\x2c\x85\x75\x98\xf3\xa8\xa1\x88\x5f\xfb\xde\xa9\xa8\xa1\xf1\x56\x0f\x2c\xdc\x4e\xa0\x2f\x9a\xf4\xa5\x4e\x87\x35\xf1\x85\x05\x86\x1d\xa3\x07\x33\x52\x05\xbe\x44\xa9\x69\x48\x58\x21\x35\xa1\x51\xc4\xf0\xe4\xab\x1a\x99\xc7\x9e\x20\x1a\x3b\x0f\x3b\x2c\x72\xd0\xb0\x48\xcb\xc0\x6e\xdf\xa4\xaa\xa0\x89\xb2\x3b\xe7\x24\x56\xac\x3f\xdc\x87\xe1\x8f\xfb\xf0\xcb\xd1\x8f\x7b\xd5\xb1\x26\xcc\xdb\x86\x71\x4e\x7f\x54\xd3\xa4\xf4\x42\xfb\x99\xdd\x0a\x2b\x86\x73\x7d\x6c\x8f\x4f\x5b\x5d\xd2\x21\x6b\xf6\xdd\x0e\x72\x43\xfc\x34\xac\x78\xdc\x28\xc8\xb3\x45\x71\xa9\xc9\xe5\x56\x63\xcf\xe0\x9a\x2c\x89\x6b\xf5\x26\x0c\x35\x28\x2d\x91\x24\x30\x06\x9e\x31\x76\xd2\x33\x4d\x21\x49\x7e\x0d\xb5\x49\x99\x63\xb0\x7b\xc0\xae\x39\xa1\xa1\x69\x0e\x2b\xcd\xc5\x16\xa6\xdd\xfa\x9c\x92\xa4\xbf\x97\xdb\x81\xce\xa1\x5f\xb2\xd9\xab\x18\x47\xa2\xce\x24\x2f\x14\xb5\x5e\x40\x24\xb8\x73\xe3\x31\x44\x22\xcc\x12\xe4\xda\xb7\x37\xb5\x2e\x91\x61\xa8\x85\xec\x7b\x2f\x6a\x27\xc2\x7b\x6e\x78\x49\xbc\x40\x9d\x77\xbd\x59\x9f\x47\xfd\xca\x8d\x83\x3d\x9f\x72\x8e\xf2\xb7\x4f\xef\xdf\xc1\x38\x3f\xdd\xca\x2f\xbe\x38\x1e\x55\xa8\x5a\x66\xb9\x4f\x18\xed\x39\x59\xd2\x05\xd1\x42\xfa\x26\xaf\x92\xfc\x0b\xc4\xc8\xba\x52\x28\xdf\x9b\xb6\x2a\xae\x1d\xc8\xfb\xff\x76\x38\x8f\xad\x24\xf8\xb2\x57\x2b\x24\xbe\x8e\x91\xf7\x8b\xd9\x98\x54\x58\x9b\x27\x08\xc0\x2a\xbf\xb9\x8e\x52\xeb\xde\xc9\x14\x24\x8a\xde\x2e\x91\xeb\x77\x54\x69\xe4\x28\xfb\x9e\x3d\xd8\xf3\xf6\xa1\xbf\xd7\x96\x58\xd8\xe1\x87\xce\x69\xac\x3e\xd5\x29\xad\x3e\x5f\x5a\x2d\x0e\x9d\x51\xf2\x93\x24\xe1\x8d\xea\xef\xf9\x73\x21\xdf\x92\x30\xee\x97\x9e\xd4\xd7\xa6\x6b\x9b\x2c\xa3\x91\x25\xf0\x25\x92\x68\x7d\xa9\x89\x46\x18\x8f\xe1\x25\xa3\x4b\x7c\x09\x7f\xfb\x1b\xb8\xde\x1b\xca\x23\x18\x9b\x0e\x6b\xf2\x97\xdb\xf8\x99\xc7\x8d\x50\x5a\xa4\xfd\xbd\x36\x8a\x6f\x32\x71\xc3\xdb\x2a\xf7\xac\xb6\x33\xee\x88\xb6\x2e\xb2\xb6\x35\xbf\x34\xb4\x6d\xbe\x5b\xe4\xbe\x92\xe1\xdf\x67\xd7\x18\x6a\x18\xe7\xf6\xdf\x50\x35\x5d\x30\x24\x3a\x8c\xfb\x28\xdb\xde\x10\x0a\xae\x04\x43\x9f\x89\x45\xdf\xbb\x14\x09\xea\x98\xf2\x05\xac\x90\x6b\x58\x49\xc1\x17\x3f\x78\x7b\x55\xbe\x45\x80\x7f\xa9\xa7\x08\xfb\x15\x5a\x4b\x12\x65\x52\xb9\x3b\x49\x6c\xb5\xfe\xe6\x00\xb7\x2b\xd6\x37\xe7\xac\x8e\x59\x35\x85\x3d\x43\xb8\xdb\x93\xa9\xfb\x84\xbb\xc9\x89\x96\xb1\x03\x60\x66\xc4\x9e\x28\xbd\xaf\xb6\xe5\xa3\xf7\x21\x17\xf4\x86\x6a\x75\x81\xf2\xd2\x9e\xf7\x9b\xb2\x6c\x9e\x96\x57\xd4\xd8\xfa\xf6\xe2\x40\xd3\xed\x8d\x74\xcb\x71\x1a\x67\xfc\x46\xc1\x18\x3e\xff\x79\x17\x93\x76\x62\x89\x88\x26\x64\x49\x28\x23\x33\x86\xde\x3e\xa0\xe9\xee\xce\x31\x15\x41\x7e\x9a\xa9\xb8\x6f\x69\x7d\xc3\xe1\x2b\xfe\xbd\xd5\x27\xea\x27\xec\xf7\x49\x7c\x3b\xb3\xae\xb9\xdc\x05\x23\x6b\x13\x15\xe5\xd5\x0c\xdf\xf7\x3b\x02\xdf\xc4\x92\xce\xa7\x8c\x89\x59\x3e\xb5\xe6\xd7\x7e\xc5\x18\x1d\xa9\xa8\x32\xf0\x4a\x32\x18\xc3\xd5\xc7\x77\x7e\x28\x91\x68\x74\x21\x7e\xf5\xf1\x5d\xbf\xe4\x7b\x37\x83\x5c\xaa\x0b\xc8\x82\x65\xc7\x10\xdb\xe5\x1b\xd8\x5d\xc9\xd1\xf5\x0a\x8e\x3c\xc2\xc8\xe4\xaf\x32\x8b\x6f\x4b\xb8\xf7\xb7\x6c\x2b\x98\x6b\xbe\xb1\x45\xb7\xad\x1e\xbc\xb3\x33\x55\x13\xcc\x3d\x2b\x68\x67\x8e\xab\x3e\xdf\x77\x05\xb5\x86\x7c\xca\x0a\x7a\x47\x0e\xaf\xdf\xaa\xda\xce\xbb\x63\x6d\xda\x45\xf6\xf5\x22\x0a\x1d\x29\xb2\x1b\x56\x2b\x3f\xdb\xf5\xf3\x36\xde\x9d\x25\x51\xe2\xc2\x78\x92\xac\x39\x95\x2a\x63\xe7\x81\xab\xba\x7c\x4d\xbe\xc3\x6a\xb9\x72\xf6\xfc\x2d\x4e\xbe\x95\x65\x65\x2f\x7e\xaf\xd2\xa9\xde\xac\xa7\x8c\x28\xf5\x81\x24\xd8\xb7\xfb\x2e\x7b\x9f\x87\x7f\xd6\xa7\xbc\xa2\x4a\x6e\xb0\x1d\xf4\xaf\x1f\x9f\xff\xd5\x10\x1a\x17\xbb\x77\x84\xd1\xbc\x70\xf5\x28\x28\x6a\x27\x0a\x4f\x3f\x15\x1d\x37\xb1\xfe\x7a\x18\xf7\x9b\x8e\x8e\xab\x24\x8f\x02\xa5\x79\x3c\xf2\xf4\x93\xd2\x7d\xc7\xe4\xbb\x00\x73\xbf\xa9\xd9\xad\x22\x97\x9f\x1b\x7b\x27\x5d\x29\x77\x2a\xd2\xf5\x1b\xbb\x51\xb8\xc9\xb7\x66\xdd\x8b\xb9\xf6\xd5\xcd\x88\x6d\xa0\xee\xda\x9c\xce\x41\xcc\x85\x84\x3e\x43\x6d\xf9\x82\x98\x97\xfc\xab\xe5\xd4\xb4\xdd\x81\x64\xcb\xe2\x39\x08\xe0\xbf\xd0\xdd\x2e\xce\x99\xba\x3b\x66\x5a\xd2\xc5\x02\x25\x46\xae\xcb\x0c\x6e\xad\xee\x73\x1a\xca\x17\x06\x18\x8c\x1d\x99\xef\xee\x70\x9c\x6c\x13\xb3\x24\x2c\x43\x03\xc2\xbc\x18\x94\x28\xf5\xda\xdd\xa4\x5e\xc5\x34\x8c\xdd\xee\x84\x48\xd7\xc5\x1d\x39\xaa\x80\x28\x25\x42\x4a\x34\x46\x2d\x25\x0c\x87\x3f\x08\xb3\x9f\x62\x55\x75\xfc\x94\x48\xe4\x85\xc9\xfd\x30\xa6\x2c\x92\xc8\x3f\x1f\x54\xbc\xa7\xa5\xe3\xd4\x2e\x83\x23\x20\x10\x65\x49\xb2\x06\xca\xd3\x4c\x83\x12\xb9\x4d\x4a\xed\x43\xc2\x61\x66\xb5\xa4\xc6\x42\xa2\xb8\xe0\x9c\x5a\x47\x6e\x1b\x0a\x93\xf4\xdc\xb2\xaa\xf8\x83\x5b\x72\xe7\xfa\xf5\x3d\x2b\xca\x6b\xac\x10\xca\x81\xbe\x93\x3b\x2e\xe0\x6e\x59\x76\xce\x44\xb4\xf6\x49\x9a\x22\x8f\xa6\x06\x70\xbf\x64\xb0\x95\xb1\xb2\xdb\x63\xcd\xa5\x49\xc9\x11\x6f\x31\x9c\x8a\x24\x21\xdc\x14\x49\x91\xae\x9b\x2a\xd6\x65\x4b\x4c\xc4\x12\xb7\xcb\xee\x5c\xc0\x2c\x50\xbb\x4f\xdf\x73\x3e\xdf\x7c\xd7\xcf\x51\x87\x71\xff\x65\x60\xbe\xe1\xfc\x6b\x25\xf8\xcb\xcd\xb7\xaf\xfb\xee\x95\xa8\x52\xc1\x15\x1a\xaf\x2e\x7e\xb7\x94\xfd\xbd\x26\xa9\x61\x52\x77\x7e\x13\x4e\x73\x8a\x2c\xb2\xeb\xfa\x1a\xa4\xcd\xa9\xe5\x7e\xab\xdd\x9d\xca\x36\xda\xf3\xd3\xc1\x46\x6b\xfd\xc0\xad\xd1\x59\x39\xbb\x6a\xf4\xd4\x6e\xfa\x34\xfa\xaa\xd7\x65\x3a\xbb\xf2\xbb\x27\x9d\x7d\x97\xbf\x5f\x6d\xfe\x3e\xac\xf2\x21\x63\xb3\x8b\xfb\xa8\xa3\x40\x79\x6e\x95\xe6\x4a\xbd\xb4\x97\xc9\x5a\x66\x7d\x6c\xa9\x3e\xd3\x3f\x77\xfb\x02\x2a\x87\x7e\x63\x76\x37\x13\xf7\xb9\x1c\x5c\x11\xf6\xa5\x4c\xf3\x5f\x7a\xdb\x56\xc0\x27\xbd\xce\x44\x7d\xd2\x6b\x78\xdc\x49\x6f\xf3\x57\xb6\xbd\x51\xe0\xfe\x26\xfa\xff\x02\x00\x00\xff\xff\xee\xcb\xa8\x83\x24\x3d\x00\x00")

func inlinedHtmlBytes() ([]byte, error) {
	return bindataRead(
		_inlinedHtml,
		"inlined.html",
	)
}

func inlinedHtml() (*asset, error) {
	bytes, err := inlinedHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "inlined.html", size: 15652, mode: os.FileMode(420), modTime: time.Unix(1609128413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"inlined.html": inlinedHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"inlined.html": &bintree{inlinedHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
